디버깅
	- 오류 확인
	- 디버거를 사용하면 오류를 쉽게 감지
	- 디버거는 중단점을 설정 하여 실행을 제어, 문장 단위로 실행하거나 변수 값을 살펴볼 수 있음
	
예외 처리
	- 실행 도중 오류가 발생했을 때 오류를 사용자에게 알려 주고 모든 데이터를 저장하게 한 후에 사용자가 프로그램을 종료할 수 있도록 하는 것이 바람직
	
예외(exception)
	- 잘못된 코드, 부정확한 데이터 등

try-catch 블록
	try{
	
	}catch{
	
	}
	finally{
	}
	
finally 블록
	- out.close() 주로 씀
	
예외의 종류
	- Error : 너무 심각해서 방법이 없음 -> 통과
	- RuntimeException : 프로그래밍 버그이므로 고쳐야됨
	- 그 외 : 반드시 처리해야 함->검사
	
다형성과 예외
	- 원칙에 따라 상위 클래스의 참조 변수는 하위 클래스의 객체를 참조
	- catch블록에서 예외를 잡을 때 유용
	
예외와 메소드
	- 메소드가 예외를 발생시킨다고 기술하는 방법
		- throws를 사용, 다른 메소드 한테 예외 처리를 맡김
		
	절차
		- 런타임 시스템은 그 메소드 안에 예외 처리기가 있는지 살핌, 처리기가 없다면 호출 스택에 있는 상위 메소드를 조사
	
예외는 throw 문장으로 처리





