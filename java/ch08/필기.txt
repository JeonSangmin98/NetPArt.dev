인터페이스
	- 서로 다른 장치들이 연결되어서 상호 데이터를 주고 받는 규격
	
자바 인터페이스
	- 클래스와 클래스 사이의 상호 작용의 규격을 나타낸 것
	- 추상 메소드만 정의
	
인터페이스와 타입
	- 인터페이스는 하나의 타입(자료형)으로 간주
	
인터페이스 상속하기
	- 인터페이스 끼리 상속 받는 것 가능
	class - extends -> class
	class - implements -> interface
	interface - extends -> interface
	
다중 상속
	- 하나의 클래스가 여러 개의 부모 클래스를 가지는 것
	- 여러개의 수퍼클래스로부터 상속하는 것
	- 자바는 다중 상속 지원 안함
	- 어려운 문제 발생함
	- 인터페이스를 이용하면 다중 상속 효과를 낼 수 있음
	
상수 정의
	- 인터페이스에는 상수를 정의할 수 있다.
	
디폴트 메소드
	- 구현하지 않아도 바로 사용 가능
	
무명 클래스
	- 몸체는 정의 되지만 이름이 없는 클래스
	- 클래스를 정의 하면서 동시에 객체 생성
	- 이름이 없기 때문에 한번만 사용이 가능
	
람다식
	- 나중에 실행될 목적으로 다른 곳에 전달될 수 있는 코드 불록
	- 메소드가 필요한 곳에 간단히 메소드를 보낼 수 있다.
	- 메소드를 객체로 취급 할 수 있는 기능
	
람다식 구문
	- (argument) -> {body}구문 사용하여 작성
	(arg1, arg2, ... ) -> { body }
	(type arg1, type arg2, ... ) -> { body }
	- 예시
		() -> System.out.println("Hello World!");
		(String s) -> { System.out.println(s); }
		() -> 69
		() -> {return 3.141592;};
	- 특징
		- 0개 이상의 매개변수
			( 자료형 생략 가능 )
		- 매개변수는 괄호로 묶고 쉼표로 구분
		- 빈괄호는 매개 변수가 없다는 뜻
		- 단일 매개 변수이고 타입유추가 가능한 경우 괄호 생략 가능
		- 본문에는 0개 이상의 문장 포함
		- 하나 이상 문장은 중괄호로 묶음
		
	- 왜 필요한가
		- 버튼의 클릭 이벤트를 처리할 수 있음
		
함수 인터페이스와 람다식
	- 함수 인터페이스는 하나의 추상 메서드만 선언된 인터페이스
	- 람다식은 함수 인터페이스에 대입할 수 있다.

패키지
	- 서로 관련 있는 클래스나 인터페이스를 하나의 꾸러미로 묶은 것
	- 클래스의 이름 공간을 분리하는데 사용
	- 자바가 제공하는 라이브러리도 기능별로 패키지로 묶여서 제공됨
	- 관련 클래스들을 하나의 단위로 모음
	- 더욱 세밀한 접근제어 구현 가능
	- 가장 중요한 이유는 이름공간(name space) 때문
	
패키지의 정의
	- 소스 파일 첫 번쨰 줄로 추가
	package 패키지 이름;
	- 보통 회사.부서.프로젝트 순으로 이름 지음
	
전체
	- import library *
	- import 패기지.클래스;
	
정적 import 문장
	- 정적 상수나 정적 메소드를 사용 하는 경우 사용 하면 클래스 이름 생략 가능
	


오류 메세지 분석